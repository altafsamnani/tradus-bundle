<?xml version="1.0"?>
<ruleset name="Spryker">
    <description>
        Spryker Coding Standard.

        All sniffs in ./Sniffs will be auto loaded
    </description>

    <!-- Ignore all (PHP) test files. -->
    <exclude-pattern>*/test_files/*</exclude-pattern>

    <exclude-pattern>\.idea</exclude-pattern>
    <exclude-pattern>\.git</exclude-pattern>
    <exclude-pattern>*\.xml</exclude-pattern>
    <exclude-pattern>*\.css</exclude-pattern>
    <exclude-pattern>*\.js</exclude-pattern>
    <exclude-pattern>*\.yml</exclude-pattern>
    <exclude-pattern>*\.txt</exclude-pattern>
    <exclude-pattern>*\.json</exclude-pattern>

    <config name="installed_paths" value="../../slevomat/coding-standard"/>

    <!-- Namespaces -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="searchAnnotations" type="bool" value="true"/>
        </properties>
    </rule>
    <!-- <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" type="bool" value="true"/>
        </properties>
    </rule> -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing"/>
    <!-- Namespaces -->

    <!-- TypeHints -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>
    <rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints"/>
    <!-- TypeHints -->

    <!-- Classes -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility">
        <properties>
            <property name="fixable" type="bool" value="true"/>
        </properties>
    </rule>
    <rule ref="PEAR.Classes.ClassDeclaration"/>
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>
    <!-- Classes -->

    <!-- Control Structures -->
    <rule ref="SlevomatCodingStandard.ControlStructures.NewWithParentheses"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowContinueWithoutIntegerOperandInSwitch"/>
    <rule ref="PEAR.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration"/>
    <rule ref="Squiz.ControlStructures.LowercaseDeclaration"/>
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
    <!-- Control Structures -->

    <!-- Variables -->
    <rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable"/>
    <!-- <rule ref="SlevomatCodingStandard.Variables.UnusedVariable"/> -->
    <rule ref="SlevomatCodingStandard.Variables.UselessVariable"/>
    <!-- Variables -->

    <!-- PHP -->
    <rule ref="SlevomatCodingStandard.PHP.UselessSemicolon"/>
    <rule ref="SlevomatCodingStandard.PHP.ShortList"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Squiz.PHP.Eval"/>
    <rule ref="Generic.PHP.ForbiddenFunctions"/>
    <rule ref="Squiz.PHP.NonExecutableCode"/>
    <rule ref="Generic.PHP.NoSilencedErrors"/>
    <rule ref="Generic.PHP.LowerCaseConstant"/>
    <!-- PHP -->

    <!-- Exceptions -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>
    <!-- Exceptions -->

    <!-- Commenting -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>
    <rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration"/>
    <rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <!-- Commenting -->

    <!-- WhiteSpace -->
    <rule ref="Generic.WhiteSpace.ScopeIndent">
        <properties>
            <property name="ignoreIndentationTokens" type="array" value="T_COMMENT,T_DOC_COMMENT_OPEN_TAG"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing"/>
    <rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <!-- WhiteSpace -->

    <!-- Arrays -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>
    <!-- Arrays -->

    <!-- CodeAnalysis -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop"/>
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>
    <!-- CodeAnalysis -->

    <!-- Scope -->
    <rule ref="Squiz.Scope.MemberVarScope"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Scope.StaticThisUsage"/>
    <!-- Scope -->

    <!-- Files -->
    <rule ref="Zend.Files.ClosingTag"/>
    <rule ref="Generic.Files.LineEndings"/>
    <rule ref="Generic.Files.LineLength.TooLong">
        <severity>0</severity>
    </rule>
    <rule ref="PSR1.Files.SideEffects.FoundWithSymbols">
        <severity>0</severity>
    </rule>
    <!-- Files -->

    <!-- Functions -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>
    <rule ref="Squiz.Functions.FunctionDeclaration"/>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.ValidDefaultValue"/>
    <!-- <rule ref="SlevomatCodingStandard.Functions.UnusedParameter"/> -->
    <!-- Functions -->

    <!-- Operators -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>
    <!-- Operators -->

    <!-- Formatting -->
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.NoSpaceAfterCast"/>
    <!-- Formatting -->

    <!-- Naming Conventions -->
    <rule ref="PEAR.NamingConventions.ValidClassName"/>
    <!--<rule ref="Squiz.NamingConventions.ValidVariableName.NotCamelCaps"/>-->
    <!-- Naming Conventions -->

    <!-- Method Declaration -->
    <rule ref="PSR2.Methods.MethodDeclaration.Underscore">
        <severity>0</severity>
    </rule>
    <!-- Method Declaration -->

    <!-- Generic -->
    <rule ref="PSR2"/>
    <!-- Generic -->
</ruleset>
