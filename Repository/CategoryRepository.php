<?php

namespace TradusBundle\Repository;

use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use TradusBundle\Entity\Attribute;
use TradusBundle\Entity\Category;
use TradusBundle\Service\Redis\RedisService;
use TradusBundle\Service\Search\SearchService;
use TradusBundle\Transformer\CategoryTransformer;

/**
 * CategoryRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    /**
     * @return mixed
     */
    public function getL1Categories()
    {
        $query = $this->createQueryBuilder('categories')
            ->select('categories')
            ->andWhere('categories.parent is null')
            ->andWhere('categories.status = :status')
            ->setParameter('status', Category::STATUS_ONLINE);

        return $query->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function getL2Categories()
    {
        $query = $this->createQueryBuilder('categories')
            ->select('categories')
            ->andWhere('categories.parent is not null')
            ->andWhere('categories.status = :status')
            ->andWhere('categories.depth = 2')
            ->setParameter('status', Category::STATUS_ONLINE);

        return $query->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function getL3Categories()
    {
        $query = $this->createQueryBuilder('categories')
            ->select('categories')
            ->andWhere('categories.parent is not null')
            ->andWhere('categories.status = :status')
            ->andWhere('categories.depth = 3')
            ->setParameter('status', Category::STATUS_ONLINE);

        return $query->getQuery()->getResult();
    }

    /**
     * @return mixed
     */
    public function getAllCategoriesSortByDepth()
    {
        $query = $this->createQueryBuilder('categories')
            ->select('categories')
            ->Where('categories.status = :status')
            ->orderBy('categories.depth', 'ASC')
            ->setParameter('status', Category::STATUS_ONLINE);

        return $query->getQuery()->getResult();
    }

    /**
     * To get top level category id of a particular category.
     * @param Category $category
     * @return int
     * @throws DBALException
     */
    public function getTopLevelCategoryId(Category $category)
    {
        $depth = $category->getDepth();

        $table = 'categories as C0';
        $fetchColumn = 'C0.parent_id';
        $joins = '';
        for ($i = 1; $i < $depth; $i++) {
            $joins .= "LEFT JOIN categories as C$i ON (C".($i - 1).".parent_id = C$i.id AND 
                        C$i.status = ".Category::STATUS_ONLINE.')';
            $fetchColumn = "C$i.parent_id, $fetchColumn";
        }

        $fetchColumn = "COALESCE($fetchColumn) as parent_id";
        $connection = $this->getEntityManager()->getConnection();
        $sql = "SELECT $fetchColumn FROM $table $joins WHERE C0.id = ".$category->getId();
        $stmt = $connection->prepare($sql);
        $stmt->execute();
        $mainCategory = $stmt->fetch();

        return ! empty($mainCategory['parent_id']) ? $mainCategory['parent_id'] : $category->getId();
    }

    /**
     * Function isAllowedToDisplaySort.
     * @param int $totalOffers
     * @param int $totalWithAttribute
     */
    public function isAllowedToDisplaySort(int $totalOffers, int $totalWithAttribute): bool
    {
        if ($totalOffers === 0) {
            return false;
        }
        $result = $totalWithAttribute / $totalOffers;
        $percentage = Category::CATEGORY_SORT_MIN_PERCENTAGE / 100;
        if ($result > $percentage) {
            return true;
        }

        return false;
    }

    /**
     * Function isAllowedToDisplayFilter.
     * @param int $totalOffers
     * @param int $totalWithAttribute
     */
    public function isAllowedToDisplayFilter(int $totalOffers, int $totalWithAttribute): bool
    {
        if ($totalOffers === 0) {
            return false;
        }
        $result = $totalWithAttribute / $totalOffers;
        $percentage = Category::CATEGORY_FILTER_MIN_PERCENTAGE / 100;
        if ($result > $percentage) {
            return true;
        }

        return false;
    }

    /**
     * Function getAllChildrenIds.
     * @param Category $category
     * @return array
     */
    public function getAllChildrenIds(Category $category): array
    {
        $redis = new RedisService(Category::REDIS_NAMESPACE_CATEGORY_CHILDREN);
        $results = $redis->getParameter($category->getId());
        if (! empty($results)) {
            $results = json_decode($results);
        } else {
            $redis = new RedisService(Category::REDIS_NAMESPACE_CATEGORY_CHILDREN);
            $results = $this->getChildrenIds($category);
            $payload[$category->getId()] = json_encode($results);
            $redis->setByPayload($payload);
        }

        return $results;
    }

    /**
     * Function getChildrenIds.
     * @param Category $category
     * @param array | null $results
     * @return array
     */
    public function getChildrenIds(Category $category, &$results = false): array
    {
        if (! $results) {
            $results = [];
        }

        $children = $category->getChildren();
        foreach ($children as $child) {
            if ($child->getStatus() == Category::STATUS_ONLINE) {
                array_push($results, $child->getId());
                $this->getChildrenIds($child, $results);
            }
        }

        return $results;
    }

    /**
     * Function getCategorySortPayload.
     * @param int $category
     * @return array
     */
    public function getCategorySortPayload(int $category): array
    {
        $sortType = SearchService::EXTRA_SORT_FACETS;
        $filterType = SearchService::EXTRA_FILTERS_FACETS;
        $resultPayload = [];

        global $kernel;

        $solr = $kernel->getContainer()->getParameter('solr');

        $search = new SearchService($solr, $this->getEntityManager());
        $results = $search->getCategoryFacetsForSort($category);
        $facets = $temp = $results->getFacetFields();

        $fullResponse = $results->getData();
        $total = $fullResponse['response']['numFound'];
        $sorts = [];
        foreach ($sortType as $sort) {
            if (isset($facets[$sort['facet']])) {
                $value = array_pop($facets[$sort['facet']]);

                if (is_numeric($value)) {
                    if ($this->isAllowedToDisplaySort($total, $value)) {
                        $sorts[] = implode(',', $sort['sorts']);
                    }
                }
            }
        }

        $filters = [];
        $facets = $temp;
        foreach ($filterType as $filter) {
            if (isset($facets[$filter['facet']])) {
                $value = array_pop($facets[$filter['facet']]);
                if (is_numeric($value)) {
                    if ($this->isAllowedToDisplayFilter($total, $value)) {
                        $filters[$filter['name']] = $filter['filters'];
                    }
                }
            }
        }

        if (count($sorts) > 0 || count($filters) > 0) {
            $resultPayload = [
                'sorts' => explode(',', implode(',', $sorts)),
                'filters' => $filters,
            ];
        }

        return $resultPayload;
    }

    /**
     * Function getCategoryMakesRedis.
     * @param int $categoryId
     * @return array | bool
     */
    public function getCategoryMakesRedis(int $categoryId)
    {
        $redis = new RedisService(Category::REDIS_NAMESPACE_CATEGORY_MAKES);

        if ($redis) {
            $makes = $redis->getParameter($categoryId);

            if ($makes) {
                return $makes;
            }
        }

        return false;
    }

    /**
     * Function setCategorySortRedis.
     * @param array $payload
     * @return bool
     * Note: the payload should be a key value pair, where the key is the ID of the category,
     * and the value is the extra sorts
     */
    public function setCategorySortRedis(array $payload): bool
    {
        $redis = new RedisService(Category::REDIS_NAMESPACE_CATEGORY_SORT);

        if ($redis) {
            return $redis->setByPayload($payload);
        }

        return false;
    }

    /**
     * Function setCategoryMakesRedis.
     * @param string $makes
     * @return bool
     */
    public function setCategoryMakesRedis(int $categoryId, $makes): bool
    {
        $redis = new RedisService(
            Category::REDIS_NAMESPACE_CATEGORY_MAKES,
            Category::REDIS_NAMESPACE_CATEGORY_MAKES_EXPIRATION
        );

        if ($redis) {
            return $redis->setParameter($categoryId, $makes);
        }

        return false;
    }

    /**
     * Function setCategory Tree in Redis.
     * @return bool
     */
    public function setCategoryTreeInRedis(): bool
    {
        $catL1 = $this->getL1Categories();
        $payload = [];
        foreach ($catL1 as $category) {
            $categoryId = $category->getId();
            $tree = $this->getAllChildrenIds($category);
            $payload[$categoryId] = json_encode(['tree'=>$tree]);
            foreach ($tree as $child) {
                $payload[$child] = json_encode(['tree'=>$tree]);
            }
        }
        $redis = new RedisService(Category::REDIS_NAMESPACE_CATEGORY_TREE);

        return $redis->setByPayload($payload);
    }

    /**
     * @return bool | array
     */
    public function getCategoryTree()
    {
        $namespace = Category::REDIS_NAMESPACE_CATEGORY_TREE;
        $redis = new RedisService($namespace);

        return $redis->getAllFromNamespace();
    }

    /**
     * Get category by id.
     *
     * @param int $categoryId
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getCategoryById(int $categoryId)
    {
        $query = $this->createQueryBuilder('categories')
            ->select('categories')
            ->where('categories.id = :id')
            ->andWhere('categories.status = :status')
            ->setParameter('id', $categoryId)
            ->setParameter('status', Category::STATUS_ONLINE);

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Function getAttributesForCategory.
     * @param int $category
     */
    public function getAttributesForCategory(int $categoryId)
    {
        $namespace = Category::REDIS_NAMESPACE_CATEGORY_ATTRIBUTE;
        $redis = new RedisService($namespace);
        $attributes = $redis->getParameter($categoryId);

        if (! $attributes) {
            $attributes = $this->buildAttributesForCategory($categoryId);
        }
        $attributes = json_decode($attributes, true);

        $redis->changeNamespace(Attribute::REDIS_NAMESPACE_ATTRIBUTES);

        $response = [];
        foreach ($attributes as $attribute) {
            $definition = $redis->getParameter($attribute);
            $response[$attribute] = $definition;
        }

        return $response;
    }

    public function buildAttributesForCategory(int $categoryId)
    {
        $namespace = Category::REDIS_NAMESPACE_CATEGORY_ATTRIBUTE;
        $redis = new RedisService($namespace);

        $tree = $this->getTreeForCategory($categoryId);
        $categories = json_decode($tree, true);

        if (! isset($categories['tree'])) {
            $this->setCategoryTreeInRedis();
            $tree = $this->getTreeForCategory($categoryId);
            $categories = json_decode($tree, true);
        }

        if (! is_array($categories['tree']) || count($categories['tree']) == 0) {
            $this->setCategoryTreeInRedis();
            $tree = $this->getTreeForCategory($categoryId);
            $categories = json_decode($tree, true);

            if (! is_array($categories)) {
                return [];
            }
        }

        $categoriesString = implode(',', $categories['tree']).','.$categoryId;

        $connection = $this->getEntityManager()->getConnection();
        $sql = 'SELECT DISTINCT(attribute_id)
                FROM category_attributes 
                WHERE category_id IN ('.$categoriesString.')';

        $stmt = $connection->prepare($sql);
        $stmt->execute();

        $result = $stmt->fetchAll();

        $attributes = json_encode(array_column($result, 'attribute_id'));

        $redis->setParameter($categoryId, $attributes);

        return $attributes;
    }

    /**
     * Function getTreeForCategory.
     * @param int $categoryId
     * @return mixed
     */
    public function getTreeForCategory(int $categoryId)
    {
        $namespace = Category::REDIS_NAMESPACE_CATEGORY_TREE;
        $redis = new RedisService($namespace);
        $tree = $redis->getParameter($categoryId);

        if (! $tree) {
            $this->setCategoryTreeInRedis();
            $tree = $redis->getParameter($categoryId);
        }

        return $tree;
    }

    /**
     * Get the parent id of the category or false if it's one of the main categories.
     *
     * @param $category
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function getParentCategory($category)
    {
        $query = $this->createQueryBuilder('categories')
            ->select('categories')
            ->andWhere('categories.id = :category')
            ->andWhere('categories.status = :status')
            ->setParameter('category', $category)
            ->setParameter('status', Category::STATUS_ONLINE);
        $categoryObject = $query->getQuery()->getOneOrNullResult();

        if (! $categoryObject) {
            return false;
        }
        $parent = $categoryObject->getParent();

        if (! $parent) {
            return false;
        }

        /* @var Category $parent */
        return $parent->getId();
    }

    /**
     * Gets the category name from Redis in desired language.
     *
     * @param int $categoryId
     * @param string $locale
     * @return bool|mixed|string
     * @throws NonUniqueResultException
     */
    public function getCategoryName(int $categoryId, string $locale)
    {
        $namespace = Category::REDIS_NAMESPACE_CATEGORY_NAME;
        $redis = new RedisService($namespace);

        $myKey = $locale.':'.(int) $categoryId;
        $categoryName = $redis->getParameter($myKey);

        if (empty($categoryName)) {
            /** @var Category $category */
            $category = $this->getCategoryById($categoryId);
            if (! $category) {
                return '';
            }
            $categoryName = $category->getNameTranslation($locale);
            $redis->setParameter($myKey, $categoryName);
        }

        return $categoryName;
    }

    /**
     * Returns the list of categories from cache with children
     * If not present we create it and save it in cache.
     *
     * @param $locale
     * @return mixed
     */
    public function getCategoriesFromCache($locale)
    {
        global $kernel;
        $container = $kernel->getContainer();
        $cache = $container->get('cache.app');
        $categoryCached = $cache->getItem('all_categories_'.$locale);

        if (! $categoryCached->isHit()) {
            $categoriesActived = $this->createQueryBuilder('o')
                ->select('o')
                ->andWhere('o.status = :status')
                ->andWhere('o.parent is null')
                ->setParameter('status', Category::STATUS_ONLINE)
                ->getQuery()
                ->getResult();

            $categories = (new CategoryTransformer($categoriesActived, $locale))->transform();
            $categoryCached->set($categories);
            $categoryCached->expiresAfter(500);
            $cache->save($categoryCached);
        }

        return $categoryCached->get();
    }
}
