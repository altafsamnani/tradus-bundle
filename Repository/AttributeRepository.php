<?php

namespace TradusBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Join;
use TradusBundle\Entity\Attribute;
use TradusBundle\Service\Redis\RedisService;

/**
 * AttributeRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AttributeRepository extends EntityRepository
{
    /**
     * @return mixed
     */
    public function findActive()
    {
        return $this->createQueryBuilder('attributes')
            ->select('attributes')
            ->where('attributes.status = :status')
            ->andWhere('attributes.parentId IS NULL')
            ->setParameter('status', Attribute::STATUS_ONLINE)
            ->getQuery();
    }

    /**
     * @return mixed
     */
    public function findAttributesWithGroupsAndOptions()
    {
        return $this->createQueryBuilder('attributes')
            ->select('attributes')
            ->join(
                'TradusBundle\Entity\SearchGroup',
                'search_groups',
                Join::WITH,
                'search_groups.id = attributes.searchGroup'
            )
            ->where('attributes.status = :status')
            ->andWhere('attributes.parentId IS NULL')
            ->addOrderBy('search_groups.sortOrder')
            ->addOrderBy('attributes.searchSortOrder')
            ->setParameter('status', Attribute::STATUS_ONLINE)
            ->getQuery();
    }

    /**
     * @return bool
     */
    public function setAttributesInRedis()
    {
        $attributes = $this->findAttributesWithGroupsAndOptions()->getResult();
        $payload = [];
        $response = 0;
        foreach ($attributes as $attribute) {
            $payload[$attribute->getId()] = $this->getAttributePayload($attribute);
            $response++;
        }

        $redis = new RedisService(Attribute::REDIS_NAMESPACE_ATTRIBUTES);

        if ($redis) {
            return $redis->setByPayload($payload);
        }

        return false;
    }

    /**
     * @param Attribute $attribute
     * @return false|string
     */
    public function getAttributePayload(Attribute $attribute)
    {
        $options = [];
        if ($attribute->getAttributeType() == Attribute::ATTRIBUTE_TYPE_LIST) {
            foreach ($attribute->getOptions() as $option) {
                if ($option->getStatus() == Attribute::STATUS_ONLINE) {
                    $options[] = [
                        'option_id' => $option->getId(),
                        'option_name' => $option->getContent(),
                        'option_translation_key' => $option->getTranslationKey(),
                    ];
                }
            }
        }

        return json_encode([
            'attribute_id' => $attribute->getId(),
            'search_group_id' => $attribute->getSearchGroup()->getId(),
            'search_group_name' => $attribute->getSearchGroup()->getName(),
            'search_group_translation_key' => $attribute->getSearchGroup()->getTranslationKey(),
            'attribute_solr_field' => $attribute->getSolrField(),
            'attribute_measure_unit' => $attribute->getMeasureUnit(),
            'attribute_name' => $attribute->getTranslationText(),
            'attribute_translation_key' => $attribute->getTranslationKey(),
            'attribute_type' => $attribute->getAttributeType(),
            'attribute_select_multiple' => $attribute->getSelectMultiple(),
            'html_component_type' => $attribute->getHtmlComponentType(),
            'attribute_allow_filter' => $attribute->getAllowFilter(),
            'attribute_options' => $options,
        ]);
    }
}
