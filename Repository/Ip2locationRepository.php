<?php

namespace TradusBundle\Repository;

use Doctrine\ORM\EntityRepository;
use TradusBundle\Entity\Ip2location;

/**
 * Ip2locationRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Ip2locationRepository extends EntityRepository
{
    /**
     * @param string $ip
     * @param string $isoCountry
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findGeolocationForIp(string $ip, string $isoCountry)
    {
        return $this->createQueryBuilder('ip2location')
            ->select('ip2location')
            ->where('ip2location.ipTo >= :ip')
//            ->andWhere('ip2location.countryCode = :isoCountry')
            ->orderBy('ip2location.ipTo', 'ASC')
            ->setMaxResults(1)
            ->setParameter('ip', ip2long($ip))
//            ->setParameter('isoCountry', strtoupper($isoCountry))
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param string $ipLong
     *
     * @return mixed
     * @throws \Doctrine\DBAL\DBALException
     */
    public function getCountryfromIp(string $ipLong)
    {
        $conn = $this->getEntityManager()->getConnection();
        $sql = 'SELECT countryLONG FROM ipcountry where '.$ipLong.'<= ipTO limit 1';

        $statement = $conn->prepare($sql);
        $statement->execute();
        $country = $statement->fetchAll();

        return ! empty($country[0]) ? $country[0]['countryLONG'] : null;
    }

    /**
     * @param string $isoCountry
     * @return mixed
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findFirstGeolocationForCountry(string $isoCountry)
    {
        return $this->createQueryBuilder('ip2location')
            ->select('ip2location')
            ->andWhere('ip2location.countryCode = :isoCountry')
            ->setMaxResults(1)
            ->setParameter('isoCountry', strtoupper($isoCountry))
            ->getQuery()
            ->getOneOrNullResult();
    }
}
