<?php

namespace TradusBundle\Repository;

use Cocur\Slugify\Slugify;
use DateTime;
use Doctrine\DBAL\DBALException;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query\Expr\Join;
use Exception;
use TradusBundle\Entity\Offer;
use TradusBundle\Entity\OfferInterface;
use TradusBundle\Entity\Seller;
use TradusBundle\Entity\SellerInterface;
use TradusBundle\Service\Config\ConfigServiceInterface;
use TradusBundle\Service\Search\SearchService;

/**
 * SellerRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SellerRepository extends EntityRepository
{
    /**
     * @param string $slug
     *
     * @return Seller
     * @throws NonUniqueResultException
     */
    public function getSellerBySlug(string $slug)
    {
        return $this->createQueryBuilder('s')
            ->where('s.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param string $slug
     *
     * @return string
     * @throws NonUniqueResultException
     */
    public function generateSlug(string $slug): string
    {
        $slugify = new Slugify();
        $slug = $slugify->slugify($slug);
        $seller = $this->getSellerBySlug($slug);

        if ($seller && $seller->getSlug()) {
            $slug = $slug.'-'.uniqid();
        }

        return $slug;
    }

    /**
     * @param string $term
     * @return array
     * @throws Exception
     */
    public function getSellerHavingLeads($term = '-4 weeks', $id = null): array
    {
        $startDate = new DateTime();
        $startDate->modify($term);

        if (! empty($id)) {
            $select = 'o.seller_id as id';
            $limit = ' LIMIT 1';
            if (is_array($id)) {
                $where = ' AND o.seller_id in("'.implode('","', $id).'")';
            } else {
                $where = ' AND o.seller_id = '.$id;
            }
        } else {
            $select = 'distinct od.seller_id as id';
            $where = '';
            $limit = '';
        }

        $conn = $this->getEntityManager()
            ->getConnection();
        $sql = '
                SELECT '.$select.'
                FROM offers as o 
                INNER JOIN offer_analytics_daily as od
                ON o.id = od.offer_id
                WHERE (od.phone_clicks > 0 OR od.emails > 0)
                AND od.day > "'.$startDate->format('Y-m-d').'" 
                '.$where.' '.$limit;
        $stmt = $conn->prepare($sql);
        $stmt->execute();
        $sellers = $stmt->fetchAll();

        if (empty($sellers)) {
            return $sellers;
        }

        return array_column($sellers[0], 'id');
    }

    /**
     * @param string $locale
     * @param int|null $page
     * @param int|null $limit
     * @param array|null $category
     * @param array|null $country
     * @return array
     * @throws DBALException
     */
    public function getActiveSellersWithActiveOffers(
        $locale = null,
        ?int $page = null,
        ?int $limit = null,
        ?array $category = null,
        ?array $country = null
    ) {
        global $kernel;
        $locale = $locale ?? $kernel->getContainer()->getParameter(ConfigServiceInterface::DEFAULT_LOCALE_CONFIG);
        $filters = ['country', 'category'];

        $response = $this->getSellersWithFilter(false, false, $page, $limit, $category, $country);
        $response['sellers'] = array_map(function ($seller) use ($locale) {
            return $this->getSellerSlug($locale, $seller);
        }, $response['result']);

        foreach ($filters as $filter) {
            $filterStmt = $this->getSellersWithFilter(false, $filter, $page, 0, $category, $country);
            $response['facet'][$filter] = $filterStmt['result'];
        }
        unset($response['result']);

        return $response;
    }

    /**
     * @param string $locale
     * @param array $seller
     * @return array
     */
    protected function getSellerSlug(string $locale, array $seller)
    {
        $fallbackImage = 'https://www.tradus.com/assets/offer-result/transport.png';

        return array_merge($seller, [
            'url' => Seller::getSellerProfileUrl($locale, $seller['slug']),
            'offers_count' => (int) $seller['offers_count'],
            'id' => (int) $seller['id'],
            'logo' => [
                'large' => $seller['logo'] ?: $fallbackImage,
                'small' => ! empty($seller['logo']) ?
                    $seller['logo'].SellerInterface::IMAGE_SIZE_SMALL : $fallbackImage,
            ], ]);
    }

    /**
     * @param bool $random
     * @param bool $filter
     * @param int|null $page
     * @param int|null $limit
     * @param array|null $category
     * @param array|null $country
     * @return array
     * @throws DBALException
     */
    public function getSellersWithFilter(
        $random = false,
        $filter = false,
        ?int $page = null,
        ?int $limit = null,
        ?array $category = null,
        ?array $country = null
    ) {
        $connection = $this->getEntityManager()->getConnection();
        $group = ' GROUP BY s.id HAVING count(o.id) > 0 ';
        $fields = 'SQL_CALC_FOUND_ROWS s.id, slug, logo, geo_location, address, city, country, company_name, 
            count(o.id) as offers_count ';
        if ($random) {
            $fields = ' s.id, slug, logo, geo_location, company_name as name';
        }
        if ($filter == 'category') {
            $fields = " o.category_id as $filter, count(distinct s.id) as resultCount ";
            $group = ' GROUP BY o.category_id HAVING count(s.id) > 0 ';
        }
        if ($filter == 'country') {
            $fields = " s.country as $filter, count(distinct s.id) as resultCount ";
            $group = ' GROUP BY s.country HAVING count(s.id) > 0 ';
        }

        $sql = " SELECT $fields ";
        $sql .= ' FROM sellers s ';
        $sql .= ' LEFT JOIN offers o ON(o.seller_id = s.id) ';
        $sql .= ' WHERE s.status = :seller_status ';
        $parameters = ['seller_status' => Seller::STATUS_ONLINE];
        $limit = $limit ?: 30;
        $page = $page ? $page : 1;
        $categorySql = '';

        if ($category) {
            $categoryRepo = $this->getEntityManager()->getRepository('TradusBundle:Category');
            $categories = [];
            foreach ($category as $cat) {
                $categoryObject = $categoryRepo->find($cat);
                $categories = $categoryObject ?
                    array_merge($categories, $categoryRepo->getChildrenIds($categoryObject), [$cat]) :
                    $categories;
            }
            if (count($categories) > 0) {
                $categorySql .= " AND o.category_id IN ('".implode("','", $categories)."')";
            }
        }

        $sql .= ' AND o.status = :o_status ';
        $parameters['o_status'] = Offer::STATUS_ONLINE;

        //if ($categorySql && $filter != 'category') {
        $sql .= $categorySql;
        //}
        if ($country && $filter != 'country') {
            $sql .= " AND s.country IN ('".implode("','", $country)."')";
        }

        $sql .= ' AND s.seller_type > 0 AND s.testuser = 0 ';

        $sql .= $random ? ' AND s.logo IS NOT NULL' : '';

        $sql .= $group;

        $sql .= ' ORDER BY s.logo is null, '.($random ? 'RAND()' : 'count(o.id) DESC');

        $sql .= empty($filter) ? ' LIMIT '.(--$page * $limit).", $limit" : '';

        $stmt = $connection->prepare($sql);
        $stmt->execute($parameters);
        $countStmt = $connection->prepare('SELECT FOUND_ROWS() as resultCount');
        $countStmt->execute();

        return array_merge($countStmt->fetch(), ['result' => $stmt->fetchAll()]);
    }

    /**
     * @param $categories
     * @param string | null $locale
     * @return array
     * @throws DBALException
     */
    public function getSellersByCategory($categories, $locale = null)
    {
        global $kernel;
        $locale = $locale ?? $kernel->getContainer()->getParameter(ConfigServiceInterface::DEFAULT_LOCALE_CONFIG);
        $connection = $this->getEntityManager()->getConnection();
        $sql = "SELECT s.id, s.company_name as name, s.slug, s.logo, s.geo_location
                FROM sellers s
                LEFT JOIN offers o ON(o.seller_id = s.id AND o.status = :offer_status AND o.category_id IN( '".implode("','", $categories)."' )) 
                WHERE s.status = :seller_status AND s.testuser = 0 AND s.logo IS NOT NULL 
                GROUP BY s.id HAVING count(o.id) > 0
                ORDER BY RAND()
                LIMIT 30
        ";

        $parameters = [
            'seller_status' => Seller::STATUS_ONLINE,
            'offer_status' => Offer::STATUS_ONLINE,
        ];

        $stmt = $connection->prepare($sql);
        $stmt->execute($parameters);
        $results = $stmt->fetchAll();
        $fallbackImage = 'https://www.tradus.com/assets/offer-result/transport.png';

        $results = array_map(function ($row) use ($locale, $fallbackImage) {
            return array_merge($row, [
                'url' => Seller::getSellerProfileUrl($locale, $row['slug']),
                'logo' => $row['logo'] ? $row['logo'].SellerInterface::IMAGE_SIZE_SMALL : $fallbackImage,
                ]);
        }, $results);

        return ['sellers' => $results];
    }

    public function getSellerPayloads(?array $sellerIds = null)
    {
        $payloads = [];
        try {
            if (! empty($sellerIds)) {
                $allSellers = $this->findById($sellerIds);

                foreach ($allSellers as $seller) {
                    if (isset($seller) && ! empty($seller)) {
                        if (intval($seller->getTestuser()) != 1 && ! empty($seller->getOffersCount())) {
                            $payload = $seller->generateSolrPayload();
                            $payloads[] = $payload;
                        }
                    }
                }
            }
        } catch (Exception $e) {
            /* TODO - Handle exception if required */
        }

        return $payloads;
    }

    public function getSellerCatIds($sellerIds = null)
    {
        $response = [];
        try {
            if (! empty($sellerIds)) {
                if (! is_array($sellerIds)) {
                    $sellerIds = [$sellerIds];
                }
                $connection = $this->getEntityManager()->getConnection();
                $query = "
                  SELECT allCats.seller_id, concat(allCats.l3Ids,',',allCats.l2Ids,',',allCats.l1Ids) as catIds from (
                    SELECT O.seller_id,
                      GROUP_CONCAT(DISTINCT O.category_id SEPARATOR ',') AS l3Ids,
                      GROUP_CONCAT(DISTINCT cat_l2.parent_id SEPARATOR ',') AS l2Ids,
                      GROUP_CONCAT(DISTINCT cat_l1.parent_id SEPARATOR ',') AS l1Ids
                      FROM offers as O
                      inner join categories as cat_l2 on cat_l2.id = O.category_id
                      inner join categories as cat_l1 on cat_l1.id = cat_l2.parent_id
                      WHERE O.seller_id IN ('".implode("','", $sellerIds)."')
                        AND O.status = ".OfferInterface::STATUS_ONLINE.'
                      GROUP BY O.seller_id
                    ) as allCats';
                $stmt = $connection->prepare($query);
                $stmt->execute();
                $sellerCatIds = array_column($stmt->fetchAll(), 'catIds', 'seller_id');

                if (! empty($sellerCatIds)) {
                    foreach ($sellerCatIds as $sellerId => $cats) {
                        $cats = preg_replace('/,{2,}/', '', trim($cats, " ,\0"));
                        $response[$sellerId] = [];
                        if (! empty($cats)) {
                            $response[$sellerId] = explode(',', $cats);
                        }
                        sort($response[$sellerId]);
                    }
                }
            }
        } catch (Exception $e) {
            /* TODO : handle exception if required */
        }

        return $response;
    }

    public function getValidOffersCount($sellerIds = null)
    {
        $response = [];
        $offerStatus = Offer::STATUS_ONLINE.','.Offer::STATUS_MODERATED.','.Offer::STATUS_PENDING_REVIEW;
        try {
            if (! empty($sellerIds)) {
                if (! is_array($sellerIds)) {
                    $sellerIds = [$sellerIds];
                }
                $connection = $this->getEntityManager()->getConnection();
                $query = "SELECT O.seller_id, count(O.id) as validCount FROM offers as O 
                    WHERE O.seller_id IN ('".implode("','", $sellerIds)."')
                        AND O.status IN ('".$offerStatus."')
                    GROUP BY O.seller_id";
                $stmt = $connection->prepare($query);
                $stmt->execute();
                $response = array_column($stmt->fetchAll(), 'validCount', 'seller_id');
            }
        } catch (Exception $e) {
            /* TODO : handle exception if required */
        }

        return $response;
    }

    public function updateSellerCounters(Seller $seller)
    {
        $em = $this->getEntityManager();

        $sellerCategories = $this->getSellerCatIds($seller->getId());
        $sellerCategories = ! empty($sellerCategories[$seller->getId()]) && is_array($sellerCategories[$seller->getId()]) ? $sellerCategories[$seller->getId()] : [];
        $sellerCategories = implode(',', $sellerCategories);
        $seller->setOfferCategories($sellerCategories);

        $offersCount = ! empty($this->getValidOffersCount($seller->getId())) ?
            $this->getValidOffersCount($seller->getId()) : [];
        $offersCount = ! empty($offersCount[$seller->getId()]) && $offersCount[$seller->getId()] > 0 ? $offersCount[$seller->getId()] : 0;
        $seller->setOffersCount($offersCount);

        $em->persist($seller);
        $em->flush();
    }

    /**
     * @param int $emailParent
     */
    public function getActiveSellersOnSitecode(int $sitecodeId)
    {
        return $this->createQueryBuilder('s')
            ->select('s')
            ->join('TradusBundle:SellerSitecode', 'ss', Join::WITH, 's.id = ss.sellerId')
            ->where('s.status = :status')
            ->andWhere('ss.sitecode = :sitecode')
            ->setParameter('status', Seller::STATUS_ONLINE)
            ->setParameter('sitecode', $sitecodeId)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int $sellerId
     * @return array|bool
     */
    public static function getSitecodesFromOffersBySeller(int $sellerId)
    {
        global $kernel;
        $container = $kernel->getContainer();
        /** @var SearchService $search */
        $search = $container->get('tradus.search');

        return $search->getSearchSitecodesFromOffersBySeller($sellerId);
    }

    /**
     * @param int $sellerId
     * @param int $siteId
     * @return int|bool
     */
    public static function getTotalOffersBySellerInSitecode(int $sellerId, int $siteId)
    {
        global $kernel;
        $container = $kernel->getContainer();
        /** @var SearchService $search */
        $search = $container->get('tradus.search');

        return $search->getSearchTotalOffersBySellerSitecode($sellerId, $siteId);
    }
}
