<?php

namespace TradusBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use TradusBundle\Entity\SimilarOfferAlert;
use TradusBundle\Entity\Sitecodes;

/**
 * SimilarOfferAlertRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SimilarOfferAlertRepository extends EntityRepository
{
    /**
     * @to check alert exist with this offer
     * @param int $userId
     * @param int $offerId
     * @param int $sitecodeId
     * @return mixed
     * @throws NonUniqueResultException
     */
    public function checkAlertExist(int $userId, int $offerId, int $sitecodeId = Sitecodes::SITECODE_TRADUS)
    {
        return $this->createQueryBuilder('similar_offer_alerts')
            ->select('similar_offer_alerts.id')
            ->where('similar_offer_alerts.user = :user_id')
            ->andWhere('similar_offer_alerts.offer = :offer_id')
            ->andWhere('similar_offer_alerts.status = :status')
            ->andWhere('similar_offer_alerts.sitecodeId = :sitecodeId')
            ->setParameter('user_id', $userId)
            ->setParameter('offer_id', $offerId)
            ->setParameter('status', SimilarOfferAlert::STATUS_SUBSCRIBED)
            ->setParameter('sitecodeId', $sitecodeId)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * @param int $userId
     * @param bool $onlyOfferAlert
     * @param int $sitecodeId
     * @return string
     * @throws NonUniqueResultException
     */
    public function getSimilarOfferAlertsCount(
        int $userId = 0,
        bool $onlyOfferAlert = false,
        int $sitecodeId = Sitecodes::SITECODE_TRADUS
    ) {
        $alertsQuery = $this->createQueryBuilder('a')
            ->select('count(a.id)')
            ->andWhere('a.status = :status')
            ->andWhere('a.user = :user')
            ->andWhere('a.sitecodeId = :sitecodeId')
            ->setParameter('status', SimilarOfferAlert::STATUS_SUBSCRIBED)
            ->setParameter('user', $userId)
            ->setParameter('sitecodeId', $sitecodeId);

        if ($onlyOfferAlert) {
            $alertsQuery->andWhere('a.offer IS NOT NULL');
        }

        return $alertsQuery->getQuery()->getSingleScalarResult();
    }
}
