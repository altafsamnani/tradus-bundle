<?php

namespace TradusBundle\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\Query\Expr\Join;
use TradusBundle\Entity\Email;

/**
 * EmailRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EmailRepository extends EntityRepository
{
    /**
     * Count the number of emails the user sent today.
     *
     * @param string $email user email address
     *
     * @return mixed|string
     *
     * @throws NonUniqueResultException
     */
    public function countUserDailyEmails(string $email)
    {
        $now = new DateTime();
        $nowFormatted = $now->format('Y-m-d 00:00:00');

        $qb = $this->createQueryBuilder('e');

        $email = $qb->select($qb->expr()->count('e'))
            ->where('e.reply_To = :reply')
            ->andWhere('e.created_at > :created')
            ->setParameter('reply', $email)
            ->setParameter('created', $nowFormatted)
            ->getQuery()
            ->getSingleScalarResult();

        return $email;
    }

    /**
     * @param int $sellerId
     * @param string $createdAt
     */
    public function getEmailsSentToSeller(int $sellerId, string $createdAt, int $sitecodeId)
    {
        return $this->createQueryBuilder('e')
            ->select('e')
            ->where('e.email_type = :type')
            ->andWhere('e.to_seller = :sellerId')
            ->andWhere('e.created_at > :createdAt')
            ->andWhere('e.sitecode_id = :sitecodeId')
            ->andWhere('e.status = :status')
            ->setParameter('type', Email::EMAIL_TYPE_FORM_EMAIL_TO_SELLER)
            ->setParameter('sellerId', $sellerId)
            ->setParameter('createdAt', $createdAt)
            ->setParameter('sitecodeId', $sitecodeId)
            ->setParameter('status', Email::STATUS_SENT)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param int $emailParent
     */
    public function getFirstEmailResponseFromSeller(int $emailParent)
    {
        return $this->createQueryBuilder('e')
            ->select('e')
            ->join('TradusBundle:EmailConversation', 'ec', Join::WITH, 'ec.emailId = e.id')
            ->where('e.email_type = :type')
            ->andWhere('ec.firstParentId = :first_parent_id')
            ->andWhere('e.status = :status')
            ->orderBy('e.id', 'ASC')
            ->setMaxResults(1)
            ->setParameter('type', Email::EMAIL_TYPE_FORM_EMAIL_RESPONSE)
            ->setParameter('first_parent_id', $emailParent)
            ->setParameter('status', Email::STATUS_SENT)
            ->getQuery()
            ->getResult();
    }

    /**
     * Check if the seller responded to a certain lead.
     *
     * @param int $userId
     * @param int $sellerId
     * @param int $offerId
     * @param int $sitecodeId
     * @return int|mixed|string
     */
    public function checkSellerResponded(int $userId, int $sellerId, int $offerId, int $sitecodeId)
    {
        return $this->createQueryBuilder('e')
            ->select('e')
            ->where('e.email_type = :type')
            ->andWhere('e.to_seller = :sellerId')
            ->andWhere('e.offer = :offerId')
            ->andWhere('e.user_id = :userId')
            ->andWhere('e.sitecode_id = :sitecodeId')
            ->andWhere('e.status = :status')
            ->setParameter('type', Email::EMAIL_TYPE_FORM_EMAIL_RESPONSE)
            ->setParameter('sellerId', $sellerId)
            ->setParameter('offerId', $offerId)
            ->setParameter('userId', $userId)
            ->setParameter('sitecodeId', $sitecodeId)
            ->setParameter('status', Email::STATUS_SENT)
            ->getQuery()
            ->getResult();
    }

    /**
     * Check if we already sent a survey to a buyer asking about a certain seller.
     *
     * @param int $userId
     * @param int $sellerId
     * @param int $sitecodeId
     * @return int|mixed|string
     */
    public function checkSurveySent(int $userId, int $sellerId, int $sitecodeId)
    {
        return $this->createQueryBuilder('e')
            ->select('e')
            ->where('e.email_type = :type')
            ->andWhere('e.to_seller = :sellerId')
            ->andWhere('e.user_id = :userId')
            ->andWhere('e.sitecode_id = :sitecodeId')
            ->andWhere('e.status = :status')
            ->setParameter('type', Email::EMAIL_TYPE_BUYER_SURVEY)
            ->setParameter('sellerId', $sellerId)
            ->setParameter('userId', $userId)
            ->setParameter('sitecodeId', $sitecodeId)
            ->setParameter('status', Email::STATUS_SENT)
            ->getQuery()
            ->getResult();
    }

    public function numberOfSurveysInPeriod(int $userId, int $sitecodeId, string $period)
    {
        $date = date('Y-m-d 00:00:00', strtotime('-'.$period));
        $result = $this->createQueryBuilder('e')
            ->select('e')
            ->where('e.email_type = :type')
            ->andWhere('e.user_id = :userId')
            ->andWhere('e.sitecode_id = :sitecodeId')
            ->andWhere('e.status = :status')
            ->andWhere('e.created_at >= :date')
            ->setParameter('type', Email::EMAIL_TYPE_BUYER_SURVEY)
            ->setParameter('userId', $userId)
            ->setParameter('sitecodeId', $sitecodeId)
            ->setParameter('status', Email::STATUS_SENT)
            ->setParameter('date', $date)
            ->getQuery()
            ->getResult();

        return count($result);
    }
}
