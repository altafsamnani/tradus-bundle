<?php

namespace TradusBundle\Repository;

use DateTime;
use Doctrine\ORM\EntityRepository;

/**
 * OfferAnalyticsDataRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OfferAnalyticsDataRepository extends EntityRepository
{
    /**
     * Get latest action performed by the user by action in X past time.
     *
     * @param string $action
     * @param string $time http://php.net/manual/en/datetime.modify.php
     * @return mixed
     *
     * @throws NonUniqueResultException
     */
    public function getLatestByActionAndPastTime(string $action, string $time)
    {
        $interval = new DateTime();
        $interval->modify($time);

        return $this->createQueryBuilder('offer_analytics_data')
            ->select('offer_analytics_data')
            ->where('offer_analytics_data.type = :action')
            ->andWhere('offer_analytics_data.created_at >= :interval')
            ->setParameter('action', $action)
            ->setParameter('interval', $interval)
            ->getQuery()
            ->setMaxResults(1)
            ->getOneOrNullResult();
    }

    /**
     * Get all leads (emails, phone calls and phone callbacks) from a day given.
     *
     * @param string $date
     * @param int $sitecodeId
     * @return mixed
     */
    public function getLeadsFromDate(string $date, int $sitecodeId)
    {
        return $this->createQueryBuilder('o')
            ->where('o.seller IS NOT NULL')
            ->andWhere('o.offer_id IS NOT NULL')
            ->andWhere('o.user_id IS NOT NULL')
            ->andWhere("o.type IN ('phone_call', 'email', 'phone_callback')")
            ->andWhere('o.created_at > :dateMin')
            ->andWhere('o.created_at < :dateMax')
            ->andWhere('o.sitecode_id = :sitecodeId')
            ->setParameter('dateMin', $date.' 00:00:00')
            ->setParameter('dateMax', $date.' 23:59:59')
            ->setParameter('sitecodeId', $sitecodeId)
            ->groupBy('o.user_id, o.seller, o.offer_id')
            ->getQuery()
            ->getResult();
    }
}
